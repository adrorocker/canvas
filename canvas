#!/usr/bin/env php
<?php

$workingPath = getcwd();
$configFile = null;

if (file_exists(__DIR__.'/vendor/autoload.php')) {
    // Development environment.
    require __DIR__.'/vendor/autoload.php';
    $configFile = __DIR__.'/canvas.yaml';
} else {
    // Installation environment.
    require __DIR__.'/../../autoload.php';
    $configFile = __DIR__.'/../../laravie/canvas/canvas.yaml';
}

if (file_exists("{$workingPath}/canvas.yaml")) {
    $configFile = "{$workingPath}/canvas.yaml";
}

$config = Symfony\Component\Yaml\Yaml::parseFile($configFile);

$preset = Laravie\Canvas\Canvas::preset(
    $config, $workingPath, new Illuminate\Filesystem\Filesystem()
);

$app = new Symfony\Component\Console\Application('Canvas for Laravel', '0.1.0');
$app->add(new Laravie\Canvas\Commands\Channel($preset));
$app->add(new Laravie\Canvas\Commands\Console($preset));
$app->add(new Laravie\Canvas\Commands\Event($preset));
$app->add(new Laravie\Canvas\Commands\Exception($preset));
$app->add(new Laravie\Canvas\Commands\Database\Eloquent($preset));
$app->add(new Laravie\Canvas\Commands\Database\Factory($preset));
$app->add(new Laravie\Canvas\Commands\Database\Migration($preset));
$app->add(new Laravie\Canvas\Commands\Job($preset));
$app->add(new Laravie\Canvas\Commands\Listener($preset));
// mail
// notification
// observer
// policy
$app->add(new Laravie\Canvas\Commands\Provider($preset));
// request
// resource
// routing/controller
// routing/middleware
// rule
$app->add(new Laravie\Canvas\Commands\Testing($preset));

$app->run();
